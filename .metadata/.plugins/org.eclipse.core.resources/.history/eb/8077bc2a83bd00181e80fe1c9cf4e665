package com.dms.view;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Iterator;
import java.util.List;

import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import com.dms.dao.PatientDaoImpl;
import com.dms.dao.TreatmentDaoimpl;
import com.dms.dao.TreatmentMasterDaoImpl;
import com.dms.model.TreatmentMasterModel;

public class TreatmentHistory implements ActionListener {
	
	JFrame treatmentHistoryFrame;
	JLabel headingLabel,treatmentNameLabel,patientdetailsLabel,addressLabel,mobileNoLabel,AgeLabel,GenderLabel,treatmentLabel;
	JLabel patientNameLabelValue,patientdetailsLabelValue,addressLabelValue,mobileNoLabelValue,AgeLabelValue,GenderLabelValue;
	JComboBox treatmentNameBox;
	DefaultTableModel model;
	JTable jtable;
	JScrollPane jScrollPane;
	public TreatmentHistory() {
	
		
		treatmentHistoryFrame=new JFrame("Treatment History");
		treatmentHistoryFrame.setPreferredSize(new Dimension(1366,768));
		  
		String column[]={"TREATMENT DATE","TREATMENT","AMOUNT PAID","BALANCE"};    
		model = new DefaultTableModel();
		model.setColumnIdentifiers(column);
		jtable=new JTable();
		
		jtable.setModel(model);
		jtable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
		jtable.setFillsViewportHeight(true);
		jScrollPane=new JScrollPane(jtable);
		jScrollPane.setBounds(100,350,800,200);
		jScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		jScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
		
		treatmentHistoryFrame.add(jScrollPane);
		
		
		
		headingLabel=new JLabel("Treatment History");
		headingLabel.setFont(new Font("Aerial", Font.PLAIN, 50));
			
		treatmentNameBox=new JComboBox();
		
		
		treatmentNameBox.addActionListener(this);

	       List<String> l=new TreatmentDaoimpl().getTreatmentNames();
			
			for(String i:l) {
				treatmentNameBox.addItem(i);
			}
		
		
			
		treatmentNameLabel=new JLabel("Treatment Name:");
		addressLabel=new JLabel("Address");
		mobileNoLabel=new JLabel("Mobile No");
		AgeLabel=new JLabel("Age");
		GenderLabel=new JLabel("Gender");
		treatmentLabel=new JLabel("Treatment details");
		
		addressLabelValue=new JLabel();
		mobileNoLabelValue=new JLabel();
		AgeLabelValue=new JLabel();
		GenderLabelValue=new JLabel();
		
		
		headingLabel.setBounds(50, -25, 400, 100);
		
		treatmentNameLabel.setBounds(100,100,150,30);
		addressLabel.setBounds(120,200,150,30);
		mobileNoLabel.setBounds(120,250,150,30);
		AgeLabel.setBounds(500,250,50,30);
		GenderLabel.setBounds(600,250,50,30);
		treatmentLabel.setBounds(100,300,150,30);
		
		addressLabelValue.setBounds(280,200,150,30);
		mobileNoLabelValue.setBounds(280,250,150,30);
		AgeLabelValue.setBounds(550,250,50,30);
		GenderLabelValue.setBounds(650,250,50,30);
		
		treatmentNameBox.setBounds(260,100,200,30);
		
		
		
		treatmentHistoryFrame.add(headingLabel);
		
		treatmentHistoryFrame.add(treatmentNameLabel);
		treatmentHistoryFrame.add(addressLabel);
		treatmentHistoryFrame.add(mobileNoLabel);
		treatmentHistoryFrame.add(AgeLabel);
		treatmentHistoryFrame.add(GenderLabel);
		treatmentHistoryFrame.add(treatmentLabel);
		
		treatmentHistoryFrame.add(addressLabelValue);
		treatmentHistoryFrame.add(mobileNoLabelValue);
		treatmentHistoryFrame.add(AgeLabelValue);
		treatmentHistoryFrame.add(GenderLabelValue);
		
		treatmentHistoryFrame.add(treatmentNameBox);
		
		treatmentHistoryFrame.setLayout(null);
		treatmentHistoryFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		treatmentHistoryFrame.pack();
		treatmentHistoryFrame.setLocationRelativeTo(null);
		treatmentHistoryFrame.setVisible(true);

	}

	public static void main(String[] args) {
		new TreatmentHistory();
	}
	@Override
	public void actionPerformed(ActionEvent arg0) {
	
		if(treatmentNameBox.hasFocus())
		{
			if(!"select".equalsIgnoreCase(treatmentNameBox.getSelectedItem().toString()))
			{
			((DefaultTableModel)jtable.getModel()).setRowCount(0);
			
			addressLabelValue.setText(new PatientDaoImpl().getPatientbyName(treatmentNameBox.getSelectedItem().toString()).getAddress());
			mobileNoLabelValue.setText(new PatientDaoImpl().getPatientbyName(treatmentNameBox.getSelectedItem().toString()).getMobile());
			AgeLabelValue.setText(Integer.toString(new PatientDaoImpl().getPatientbyName(treatmentNameBox.getSelectedItem().toString()).getAge()));
			GenderLabelValue.setText(new PatientDaoImpl().getPatientbyName(treatmentNameBox.getSelectedItem().toString()).getSex());
			
			List list=new TreatmentMasterDaoImpl().getTreatmentMasterModelByPatientName(treatmentNameBox.getSelectedItem().toString());
			Iterator<TreatmentMasterModel> iterator=list.iterator();
			while(iterator.hasNext())
			{
				TreatmentMasterModel masterModel=(TreatmentMasterModel)iterator.next();
				String treatmentDate=masterModel.getTreatmentDate().toString();
				String treatmentname=masterModel.getTreatmentName();
				String amountpaid=Integer.toString(masterModel.getTotalpaidamount());
				String balanceamount=Integer.toString(masterModel.getBalanceamount());
				
				
				model.addRow(new Object[]{treatmentDate, treatmentname, amountpaid, balanceamount});
			}
		
			
		   }
			else if("select".equalsIgnoreCase(treatmentNameBox.getSelectedItem().toString()))
			{
				((DefaultTableModel)jtable.getModel()).setRowCount(0);
				addressLabelValue.setText("");
				mobileNoLabelValue.setText("");
				AgeLabelValue.setText("");
				GenderLabelValue.setText("");
			}
			
		}
		

		
	}
	
	

}
